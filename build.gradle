buildscript {
    ext {
        kotlinVersion = '1.2.21'
        springBootVersion = '1.5.9.RELEASE'
        springDependencyManagementVersion = '1.0.4.RELEASE'
        platformGroup = 'org.biacode.hermes.core'
        platformVersion = '0.1.0-SNAPSHOT'

        commonsLangVersion = '3.7'
        springBomVersion = 'Brussels-SR6'
        nettyVersion = '4.1.20.Final'
        propDepsPluginVersion = '0.0.9.RELEASE'

        easymockVersion = '3.5.1'
        assetjVersion = '3.9.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("io.spring.gradle:propdeps-plugin:${propDepsPluginVersion}")
    }
}

allprojects {

    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'kotlin-spring'
    apply plugin: "io.spring.dependency-management"

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    group = platformGroup
    version = platformVersion
    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    dependencyManagement {
        imports {
            mavenBom "io.spring.platform:platform-bom:${springBomVersion}"
        }
    }

    dependencies {
        // Kotlin
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
        compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

        // Spring
        compile("org.springframework:spring-context")
        compile("org.springframework.boot:spring-boot-starter")
        optional("org.springframework.boot:spring-boot-configuration-processor")

        // Apache commons
        compile("org.apache.commons:commons-lang3:${commonsLangVersion}")

        // Logging
        compile("org.slf4j:slf4j-api")
        runtime("ch.qos.logback:logback-classic")

        // Others
        compile("io.netty:netty-all:${nettyVersion}")
        compile("com.fasterxml.jackson.core:jackson-databind")

        // Test
        testCompile("junit:junit")
        testCompile("org.easymock:easymock:${easymockVersion}")
        testCompile("org.assertj:assertj-core:${assetjVersion}")
        testCompile("org.springframework:spring-test")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }

    compileJava.dependsOn(processResources)
}