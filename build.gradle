buildscript {
    ext {
        springVersion = '5.0.6.RELEASE'
        springBootVersion = '2.0.2.RELEASE'
        platformGroup = 'org.biacode.spring.netty'
        platformVersion = '0.9.1-SNAPSHOT'

        commonsLangVersion = '3.7'
        nettyVersion = '4.1.24.Final'
        slf4jVersion = '1.7.25'
        logbackVersion = '1.2.3'
        commonsLoggingVersion = '1.2'
        jacksonVersion = '2.9.5'
        propDepsPluginVersion = '0.0.10.RELEASE'
        jsr305ImplVersion = '3.0.2'

        junitVersion = '4.12'
        easymockVersion = '3.5.1'
        assetjVersion = '3.9.1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:propdeps-plugin:${propDepsPluginVersion}")
    }
}

allprojects {

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    group = platformGroup
    version = platformVersion
    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    if (System.env['DEPLOY_TO_NEXUS'] != null) {

        apply plugin: 'signing'

        signing {
            sign configurations.archives
        }

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                        authentication(userName: System.getenv('NEXUS_USERNAME'), password: System.getenv('NEXUS_PASSWORD'))
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                        authentication(userName: System.getenv('NEXUS_USERNAME'), password: System.getenv('NEXUS_PASSWORD'))
                    }

                    pom.project {
                        name 'NettySpring'
                        packaging 'jar'
                        // optionally artifactId can be defined here
                        description 'Netty spring integration.'
                        url 'https://github.com/Biacode/spring-netty'

                        scm {
                            connection 'scm:git@github.com:Biacode/spring-netty.git'
                            developerConnection 'scm:git:ssh://github.com:Biacode/spring-netty.git'
                            url 'https://github.com/Biacode/spring-netty/tree/master'
                        }

                        licenses {
                            license {
                                name 'Apache-2.0'
                                url 'https://opensource.org/licenses/Apache-2.0'
                            }
                        }

                        developers {
                            developer {
                                id 'biacode'
                                name 'Artur Asatryan'
                                email 'biacoder@gmail.com'
                            }
                        }
                    }
                }
            }
        }
    }

    dependencies {
        compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
        compile("org.slf4j:slf4j-api:$slf4jVersion")
        compile("com.google.code.findbugs:jsr305:$jsr305ImplVersion")

        testCompile("junit:junit:$junitVersion")
        testCompile("org.easymock:easymock:${easymockVersion}")
        testCompile("org.assertj:assertj-core:$assetjVersion")
        testCompile("org.springframework:spring-test:$springVersion")
        testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
        testRuntime("ch.qos.logback:logback-classic:$logbackVersion")
    }

    compileJava.dependsOn(processResources)
}

project('core') {

    dependencies {
        compile("org.springframework:spring-context:$springVersion")
        compile("io.netty:netty-all:${nettyVersion}")
    }
}

project('router') {

    dependencies {
        compile project(':core')
    }
}

project('server') {

    dependencies {
        compile project(':router')
        testCompile("commons-logging:commons-logging:$commonsLoggingVersion")
    }
}

project('websocket:websocket-server') {

    dependencies {
        compile project(':server')
        compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    }
}

project('websocket:websocket-starter') {

    dependencies {
        compile project(':websocket:websocket-server')

        compile("org.springframework.boot:spring-boot-starter:$springBootVersion")
        optional("org.springframework.boot:spring-boot-configuration-processor:$springBootVersion")
    }
}

project('examples:websocket') {

    dependencies {
        compile("org.biacode.spring.netty:websocket-starter:$platformVersion")
        compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
        testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    }

    jar {
        baseName = 'websocket'
        version = platformVersion
    }
}